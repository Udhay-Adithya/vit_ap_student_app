// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'core/models/attendance.dart';
import 'core/models/exam_schedule.dart';
import 'core/models/grade_history.dart';
import 'core/models/mark.dart';
import 'core/models/mentor_details.dart';
import 'core/models/profile.dart';
import 'core/models/timetable.dart';
import 'core/models/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 5123707987155504345),
    name: 'Attendance',
    lastPropertyId: const obx_int.IdUid(11, 8692615826272134422),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8548782710532429063),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8703113585504560712),
        name: 'courseId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5114096220984155183),
        name: 'courseCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2886758800947283188),
        name: 'courseName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 509799948469308758),
        name: 'courseType',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4026500930656990862),
        name: 'courseSlot',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 342519515066311158),
        name: 'attendedClasses',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 3661030468286201693),
        name: 'totalClasses',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 5653722895945655680),
        name: 'attendancePercentage',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 569827444883009373),
        name: 'withinAttendancePercentage',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 8692615826272134422),
        name: 'debarStatus',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 5614858150035836272),
    name: 'Day',
    lastPropertyId: const obx_int.IdUid(9, 2778219134361025485),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7390855645559893517),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2894408601336603116),
        name: 'courseName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1221346857524847011),
        name: 'slot',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4681532923547763909),
        name: 'venue',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5418864550568072898),
        name: 'faculty',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 6405263773255317332),
        name: 'courseCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 9043527980779662672),
        name: 'courseType',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 2778219134361025485),
        name: 'courseTime',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 6882108119943050166),
    name: 'Detail',
    lastPropertyId: const obx_int.IdUid(9, 340592162757067749),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 566813246599812612),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4129463829030357250),
        name: 'serialNumber',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8268603908445927918),
        name: 'markTitle',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 9035411638710991879),
        name: 'maxMark',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 764120190172868964),
        name: 'weightage',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 8955105004865060401),
        name: 'status',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 7369330145423217062),
        name: 'scoredMark',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 3710928755384170334),
        name: 'weightageMark',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 340592162757067749),
        name: 'remark',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 1515929834260539023),
    name: 'ExamSchedule',
    lastPropertyId: const obx_int.IdUid(2, 6767652003855721935),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4293912101510849114),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6767652003855721935),
        name: 'examType',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(1, 701692299607220230),
        name: 'subjects',
        targetId: const obx_int.IdUid(10, 7604390647049072904),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(6, 3368442440709288918),
    name: 'GradeHistory',
    lastPropertyId: const obx_int.IdUid(4, 7287160882904465330),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 312236663172124628),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2738588273773960794),
        name: 'creditsRegistered',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2214347283458612185),
        name: 'creditsEarned',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7287160882904465330),
        name: 'cgpa',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(7, 5299571523113836955),
    name: 'Mark',
    lastPropertyId: const obx_int.IdUid(9, 2946747298283066708),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3914954751603661010),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1119621356472785912),
        name: 'serialNumber',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7795206464647949215),
        name: 'classId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 6794049475949264619),
        name: 'courseCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 4134261397930467825),
        name: 'courseTitle',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 6163578753272362597),
        name: 'courseType',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 5657616329202711343),
        name: 'courseSystem',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 5367780434207260417),
        name: 'faculty',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 2946747298283066708),
        name: 'slot',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(2, 4306839893653419863),
        name: 'details',
        targetId: const obx_int.IdUid(4, 6882108119943050166),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(8, 4091331944148948394),
    name: 'MentorDetails',
    lastPropertyId: const obx_int.IdUid(10, 2527844347992887),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 9182507780133964988),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7912758575025609489),
        name: 'facultyId',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6136299114405220153),
        name: 'facultyName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 747284164344200061),
        name: 'facultyDesignation',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 883904399237525689),
        name: 'school',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 1153699997856523427),
        name: 'cabin',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 9020963227091433421),
        name: 'facultyDepartment',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 5267615444982450782),
        name: 'facultyEmail',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 2150267559469762522),
        name: 'facultyIntercom',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 2527844347992887),
        name: 'facultyMobileNumber',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(9, 680194971906880420),
    name: 'Profile',
    lastPropertyId: const obx_int.IdUid(10, 3506374336195626783),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5367763406684319909),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2959393046470359846),
        name: 'applicationNumber',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6315352006422910701),
        name: 'studentName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 85508676023756695),
        name: 'dob',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3881337603276210981),
        name: 'gender',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 6608040401432600631),
        name: 'bloodGroup',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 7532179956160344556),
        name: 'email',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 8913779276134358934),
        name: 'base64Pfp',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 7951206973160155799),
        name: 'gradeHistoryId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 8495242506304908117),
        relationTarget: 'GradeHistory',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 3506374336195626783),
        name: 'mentorDetailsId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(2, 3719540507703785314),
        relationTarget: 'MentorDetails',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(10, 7604390647049072904),
    name: 'Subject',
    lastPropertyId: const obx_int.IdUid(14, 2242983632811530623),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 977166261830489677),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4846748005128405122),
        name: 'serialNumber',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4910232510425386260),
        name: 'courseCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5392588647597956672),
        name: 'courseTitle',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 4467810947356105124),
        name: 'type',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 410557535426642519),
        name: 'registrationNumber',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 833870537653510162),
        name: 'slot',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 2772768402876335852),
        name: 'date',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 8212654975901355995),
        name: 'session',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 4657715169356418190),
        name: 'reportingTime',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 2628634694582307864),
        name: 'examTime',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 3229989729119313391),
        name: 'venue',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 1616851254684943728),
        name: 'seatLocation',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 2242983632811530623),
        name: 'seatNumber',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(11, 5341604529085439759),
    name: 'Timetable',
    lastPropertyId: const obx_int.IdUid(1, 3527947012416522370),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3527947012416522370),
        name: 'id',
        type: 6,
        flags: 1,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(3, 8273466375516695295),
        name: 'monday',
        targetId: const obx_int.IdUid(3, 5614858150035836272),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(4, 7804701839993664079),
        name: 'tuesday',
        targetId: const obx_int.IdUid(3, 5614858150035836272),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(5, 7144960688086037988),
        name: 'wednesday',
        targetId: const obx_int.IdUid(3, 5614858150035836272),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(6, 7267933235504353759),
        name: 'thursday',
        targetId: const obx_int.IdUid(3, 5614858150035836272),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(7, 1711419029567541304),
        name: 'friday',
        targetId: const obx_int.IdUid(3, 5614858150035836272),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(8, 6390088432600031492),
        name: 'saturday',
        targetId: const obx_int.IdUid(3, 5614858150035836272),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(9, 1981600989954201829),
        name: 'sunday',
        targetId: const obx_int.IdUid(3, 5614858150035836272),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(12, 4139431664146529181),
    name: 'User',
    lastPropertyId: const obx_int.IdUid(4, 8097306637055886219),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7347751497110519659),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7718498289958552466),
        name: 'profileId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(3, 29465422663248036),
        relationTarget: 'Profile',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8914494749092690203),
        name: 'timetableId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(4, 5412568171728135455),
        relationTarget: 'Timetable',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8097306637055886219),
        name: 'gradeHistoryId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(5, 1940050037303100762),
        relationTarget: 'GradeHistory',
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(10, 272228862704853212),
        name: 'attendance',
        targetId: const obx_int.IdUid(1, 5123707987155504345),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(11, 1730833324807225329),
        name: 'examSchedule',
        targetId: const obx_int.IdUid(5, 1515929834260539023),
      ),
      obx_int.ModelRelation(
        id: const obx_int.IdUid(12, 2229614736856779189),
        name: 'marks',
        targetId: const obx_int.IdUid(7, 5299571523113836955),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(12, 4139431664146529181),
    lastIndexId: const obx_int.IdUid(5, 1940050037303100762),
    lastRelationId: const obx_int.IdUid(12, 2229614736856779189),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [1531436616005517961],
    retiredIndexUids: const [],
    retiredPropertyUids: const [
      3578262015006500605,
      5291012841031569442,
      3023118125110255302,
      4855790039432651596,
      6799363837436826966,
    ],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Attendance: obx_int.EntityDefinition<Attendance>(
      model: _entities[0],
      toOneRelations: (Attendance object) => [],
      toManyRelations: (Attendance object) => {},
      getId: (Attendance object) => object.id,
      setId: (Attendance object, int id) {
        object.id = id;
      },
      objectToFB: (Attendance object, fb.Builder fbb) {
        final courseIdOffset = fbb.writeString(object.courseId);
        final courseCodeOffset = fbb.writeString(object.courseCode);
        final courseNameOffset = fbb.writeString(object.courseName);
        final courseTypeOffset = fbb.writeString(object.courseType);
        final courseSlotOffset = fbb.writeString(object.courseSlot);
        final attendedClassesOffset = fbb.writeString(object.attendedClasses);
        final totalClassesOffset = fbb.writeString(object.totalClasses);
        final attendancePercentageOffset = fbb.writeString(
          object.attendancePercentage,
        );
        final withinAttendancePercentageOffset = fbb.writeString(
          object.withinAttendancePercentage,
        );
        final debarStatusOffset = fbb.writeString(object.debarStatus);
        fbb.startTable(12);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, courseIdOffset);
        fbb.addOffset(2, courseCodeOffset);
        fbb.addOffset(3, courseNameOffset);
        fbb.addOffset(4, courseTypeOffset);
        fbb.addOffset(5, courseSlotOffset);
        fbb.addOffset(6, attendedClassesOffset);
        fbb.addOffset(7, totalClassesOffset);
        fbb.addOffset(8, attendancePercentageOffset);
        fbb.addOffset(9, withinAttendancePercentageOffset);
        fbb.addOffset(10, debarStatusOffset);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final courseIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final courseCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final courseNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final courseTypeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final courseSlotParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final attendedClassesParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final totalClassesParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 18, '');
        final attendancePercentageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 20, '');
        final withinAttendancePercentageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 22, '');
        final debarStatusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 24, '');
        final object = Attendance(
          courseId: courseIdParam,
          courseCode: courseCodeParam,
          courseName: courseNameParam,
          courseType: courseTypeParam,
          courseSlot: courseSlotParam,
          attendedClasses: attendedClassesParam,
          totalClasses: totalClassesParam,
          attendancePercentage: attendancePercentageParam,
          withinAttendancePercentage: withinAttendancePercentageParam,
          debarStatus: debarStatusParam,
        )..id = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

        return object;
      },
    ),
    Day: obx_int.EntityDefinition<Day>(
      model: _entities[1],
      toOneRelations: (Day object) => [],
      toManyRelations: (Day object) => {},
      getId: (Day object) => object.id,
      setId: (Day object, int id) {
        object.id = id;
      },
      objectToFB: (Day object, fb.Builder fbb) {
        final courseNameOffset = object.courseName == null
            ? null
            : fbb.writeString(object.courseName!);
        final slotOffset = object.slot == null
            ? null
            : fbb.writeString(object.slot!);
        final venueOffset = object.venue == null
            ? null
            : fbb.writeString(object.venue!);
        final facultyOffset = object.faculty == null
            ? null
            : fbb.writeString(object.faculty!);
        final courseCodeOffset = object.courseCode == null
            ? null
            : fbb.writeString(object.courseCode!);
        final courseTypeOffset = object.courseType == null
            ? null
            : fbb.writeString(object.courseType!);
        final courseTimeOffset = object.courseTime == null
            ? null
            : fbb.writeString(object.courseTime!);
        fbb.startTable(10);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, courseNameOffset);
        fbb.addOffset(2, slotOffset);
        fbb.addOffset(3, venueOffset);
        fbb.addOffset(4, facultyOffset);
        fbb.addOffset(5, courseCodeOffset);
        fbb.addOffset(6, courseTypeOffset);
        fbb.addOffset(8, courseTimeOffset);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final courseTimeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final courseNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final slotParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final venueParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final facultyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final courseCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final courseTypeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final object = Day(
          courseTime: courseTimeParam,
          courseName: courseNameParam,
          slot: slotParam,
          venue: venueParam,
          faculty: facultyParam,
          courseCode: courseCodeParam,
          courseType: courseTypeParam,
        )..id = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

        return object;
      },
    ),
    Detail: obx_int.EntityDefinition<Detail>(
      model: _entities[2],
      toOneRelations: (Detail object) => [],
      toManyRelations: (Detail object) => {},
      getId: (Detail object) => object.id,
      setId: (Detail object, int id) {
        object.id = id;
      },
      objectToFB: (Detail object, fb.Builder fbb) {
        final serialNumberOffset = fbb.writeString(object.serialNumber);
        final markTitleOffset = fbb.writeString(object.markTitle);
        final maxMarkOffset = fbb.writeString(object.maxMark);
        final weightageOffset = fbb.writeString(object.weightage);
        final statusOffset = fbb.writeString(object.status);
        final scoredMarkOffset = fbb.writeString(object.scoredMark);
        final weightageMarkOffset = fbb.writeString(object.weightageMark);
        final remarkOffset = fbb.writeString(object.remark);
        fbb.startTable(10);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, serialNumberOffset);
        fbb.addOffset(2, markTitleOffset);
        fbb.addOffset(3, maxMarkOffset);
        fbb.addOffset(4, weightageOffset);
        fbb.addOffset(5, statusOffset);
        fbb.addOffset(6, scoredMarkOffset);
        fbb.addOffset(7, weightageMarkOffset);
        fbb.addOffset(8, remarkOffset);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final serialNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final markTitleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final maxMarkParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final weightageParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final statusParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final scoredMarkParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final weightageMarkParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 18, '');
        final remarkParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 20, '');
        final object = Detail(
          serialNumber: serialNumberParam,
          markTitle: markTitleParam,
          maxMark: maxMarkParam,
          weightage: weightageParam,
          status: statusParam,
          scoredMark: scoredMarkParam,
          weightageMark: weightageMarkParam,
          remark: remarkParam,
        )..id = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

        return object;
      },
    ),
    ExamSchedule: obx_int.EntityDefinition<ExamSchedule>(
      model: _entities[3],
      toOneRelations: (ExamSchedule object) => [],
      toManyRelations: (ExamSchedule object) => {
        obx_int.RelInfo<ExamSchedule>.toMany(1, object.id!): object.subjects,
      },
      getId: (ExamSchedule object) => object.id,
      setId: (ExamSchedule object, int id) {
        object.id = id;
      },
      objectToFB: (ExamSchedule object, fb.Builder fbb) {
        final examTypeOffset = fbb.writeString(object.examType);
        fbb.startTable(3);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, examTypeOffset);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final examTypeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final object = ExamSchedule(
          examType: examTypeParam,
        )..id = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
        obx_int.InternalToManyAccess.setRelInfo<ExamSchedule>(
          object.subjects,
          store,
          obx_int.RelInfo<ExamSchedule>.toMany(1, object.id!),
        );
        return object;
      },
    ),
    GradeHistory: obx_int.EntityDefinition<GradeHistory>(
      model: _entities[4],
      toOneRelations: (GradeHistory object) => [],
      toManyRelations: (GradeHistory object) => {},
      getId: (GradeHistory object) => object.id,
      setId: (GradeHistory object, int id) {
        object.id = id;
      },
      objectToFB: (GradeHistory object, fb.Builder fbb) {
        final creditsRegisteredOffset = fbb.writeString(
          object.creditsRegistered,
        );
        final creditsEarnedOffset = fbb.writeString(object.creditsEarned);
        final cgpaOffset = fbb.writeString(object.cgpa);
        fbb.startTable(5);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, creditsRegisteredOffset);
        fbb.addOffset(2, creditsEarnedOffset);
        fbb.addOffset(3, cgpaOffset);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final creditsRegisteredParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final creditsEarnedParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final cgpaParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final object = GradeHistory(
          creditsRegistered: creditsRegisteredParam,
          creditsEarned: creditsEarnedParam,
          cgpa: cgpaParam,
        )..id = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

        return object;
      },
    ),
    Mark: obx_int.EntityDefinition<Mark>(
      model: _entities[5],
      toOneRelations: (Mark object) => [],
      toManyRelations: (Mark object) => {
        obx_int.RelInfo<Mark>.toMany(2, object.id!): object.details,
      },
      getId: (Mark object) => object.id,
      setId: (Mark object, int id) {
        object.id = id;
      },
      objectToFB: (Mark object, fb.Builder fbb) {
        final serialNumberOffset = fbb.writeString(object.serialNumber);
        final classIdOffset = fbb.writeString(object.classId);
        final courseCodeOffset = fbb.writeString(object.courseCode);
        final courseTitleOffset = fbb.writeString(object.courseTitle);
        final courseTypeOffset = fbb.writeString(object.courseType);
        final courseSystemOffset = fbb.writeString(object.courseSystem);
        final facultyOffset = fbb.writeString(object.faculty);
        final slotOffset = fbb.writeString(object.slot);
        fbb.startTable(10);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, serialNumberOffset);
        fbb.addOffset(2, classIdOffset);
        fbb.addOffset(3, courseCodeOffset);
        fbb.addOffset(4, courseTitleOffset);
        fbb.addOffset(5, courseTypeOffset);
        fbb.addOffset(6, courseSystemOffset);
        fbb.addOffset(7, facultyOffset);
        fbb.addOffset(8, slotOffset);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final serialNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final classIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final courseCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final courseTitleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final courseTypeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final courseSystemParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final facultyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 18, '');
        final slotParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 20, '');
        final detailsParam = obx.ToMany<Detail>();
        final object = Mark(
          serialNumber: serialNumberParam,
          classId: classIdParam,
          courseCode: courseCodeParam,
          courseTitle: courseTitleParam,
          courseType: courseTypeParam,
          courseSystem: courseSystemParam,
          faculty: facultyParam,
          slot: slotParam,
          details: detailsParam,
        )..id = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
        obx_int.InternalToManyAccess.setRelInfo<Mark>(
          object.details,
          store,
          obx_int.RelInfo<Mark>.toMany(2, object.id!),
        );
        return object;
      },
    ),
    MentorDetails: obx_int.EntityDefinition<MentorDetails>(
      model: _entities[6],
      toOneRelations: (MentorDetails object) => [],
      toManyRelations: (MentorDetails object) => {},
      getId: (MentorDetails object) => object.id,
      setId: (MentorDetails object, int id) {
        object.id = id;
      },
      objectToFB: (MentorDetails object, fb.Builder fbb) {
        final facultyIdOffset = fbb.writeString(object.facultyId);
        final facultyNameOffset = fbb.writeString(object.facultyName);
        final facultyDesignationOffset = fbb.writeString(
          object.facultyDesignation,
        );
        final schoolOffset = fbb.writeString(object.school);
        final cabinOffset = fbb.writeString(object.cabin);
        final facultyDepartmentOffset = fbb.writeString(
          object.facultyDepartment,
        );
        final facultyEmailOffset = fbb.writeString(object.facultyEmail);
        final facultyIntercomOffset = fbb.writeString(object.facultyIntercom);
        final facultyMobileNumberOffset = fbb.writeString(
          object.facultyMobileNumber,
        );
        fbb.startTable(11);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, facultyIdOffset);
        fbb.addOffset(2, facultyNameOffset);
        fbb.addOffset(3, facultyDesignationOffset);
        fbb.addOffset(4, schoolOffset);
        fbb.addOffset(5, cabinOffset);
        fbb.addOffset(6, facultyDepartmentOffset);
        fbb.addOffset(7, facultyEmailOffset);
        fbb.addOffset(8, facultyIntercomOffset);
        fbb.addOffset(9, facultyMobileNumberOffset);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final facultyIdParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final facultyNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final facultyDesignationParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final schoolParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final cabinParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final facultyDepartmentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final facultyEmailParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 18, '');
        final facultyIntercomParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 20, '');
        final facultyMobileNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 22, '');
        final object = MentorDetails(
          facultyId: facultyIdParam,
          facultyName: facultyNameParam,
          facultyDesignation: facultyDesignationParam,
          school: schoolParam,
          cabin: cabinParam,
          facultyDepartment: facultyDepartmentParam,
          facultyEmail: facultyEmailParam,
          facultyIntercom: facultyIntercomParam,
          facultyMobileNumber: facultyMobileNumberParam,
        )..id = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

        return object;
      },
    ),
    Profile: obx_int.EntityDefinition<Profile>(
      model: _entities[7],
      toOneRelations: (Profile object) => [
        object.gradeHistory,
        object.mentorDetails,
      ],
      toManyRelations: (Profile object) => {},
      getId: (Profile object) => object.id,
      setId: (Profile object, int id) {
        object.id = id;
      },
      objectToFB: (Profile object, fb.Builder fbb) {
        final applicationNumberOffset = fbb.writeString(
          object.applicationNumber,
        );
        final studentNameOffset = fbb.writeString(object.studentName);
        final dobOffset = fbb.writeString(object.dob);
        final genderOffset = fbb.writeString(object.gender);
        final bloodGroupOffset = fbb.writeString(object.bloodGroup);
        final emailOffset = fbb.writeString(object.email);
        final base64PfpOffset = fbb.writeString(object.base64Pfp);
        fbb.startTable(11);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, applicationNumberOffset);
        fbb.addOffset(2, studentNameOffset);
        fbb.addOffset(3, dobOffset);
        fbb.addOffset(4, genderOffset);
        fbb.addOffset(5, bloodGroupOffset);
        fbb.addOffset(6, emailOffset);
        fbb.addOffset(7, base64PfpOffset);
        fbb.addInt64(8, object.gradeHistory.targetId);
        fbb.addInt64(9, object.mentorDetails.targetId);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final applicationNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final studentNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final dobParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final genderParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final bloodGroupParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final emailParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final base64PfpParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 18, '');
        final gradeHistoryParam = obx.ToOne<GradeHistory>(
          targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0),
        );
        final mentorDetailsParam = obx.ToOne<MentorDetails>(
          targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0),
        );
        final object = Profile(
          applicationNumber: applicationNumberParam,
          studentName: studentNameParam,
          dob: dobParam,
          gender: genderParam,
          bloodGroup: bloodGroupParam,
          email: emailParam,
          base64Pfp: base64PfpParam,
          gradeHistory: gradeHistoryParam,
          mentorDetails: mentorDetailsParam,
        )..id = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
        object.gradeHistory.attach(store);
        object.mentorDetails.attach(store);
        return object;
      },
    ),
    Subject: obx_int.EntityDefinition<Subject>(
      model: _entities[8],
      toOneRelations: (Subject object) => [],
      toManyRelations: (Subject object) => {},
      getId: (Subject object) => object.id,
      setId: (Subject object, int id) {
        object.id = id;
      },
      objectToFB: (Subject object, fb.Builder fbb) {
        final serialNumberOffset = fbb.writeString(object.serialNumber);
        final courseCodeOffset = fbb.writeString(object.courseCode);
        final courseTitleOffset = fbb.writeString(object.courseTitle);
        final typeOffset = fbb.writeString(object.type);
        final registrationNumberOffset = fbb.writeString(
          object.registrationNumber,
        );
        final slotOffset = fbb.writeString(object.slot);
        final dateOffset = fbb.writeString(object.date);
        final sessionOffset = fbb.writeString(object.session);
        final reportingTimeOffset = fbb.writeString(object.reportingTime);
        final examTimeOffset = fbb.writeString(object.examTime);
        final venueOffset = fbb.writeString(object.venue);
        final seatLocationOffset = fbb.writeString(object.seatLocation);
        final seatNumberOffset = fbb.writeString(object.seatNumber);
        fbb.startTable(15);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, serialNumberOffset);
        fbb.addOffset(2, courseCodeOffset);
        fbb.addOffset(3, courseTitleOffset);
        fbb.addOffset(4, typeOffset);
        fbb.addOffset(5, registrationNumberOffset);
        fbb.addOffset(6, slotOffset);
        fbb.addOffset(7, dateOffset);
        fbb.addOffset(8, sessionOffset);
        fbb.addOffset(9, reportingTimeOffset);
        fbb.addOffset(10, examTimeOffset);
        fbb.addOffset(11, venueOffset);
        fbb.addOffset(12, seatLocationOffset);
        fbb.addOffset(13, seatNumberOffset);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final serialNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final courseCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final courseTitleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final typeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final registrationNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final slotParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 16, '');
        final dateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 18, '');
        final sessionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 20, '');
        final reportingTimeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 22, '');
        final examTimeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 24, '');
        final venueParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 26, '');
        final seatLocationParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 28, '');
        final seatNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 30, '');
        final object = Subject(
          serialNumber: serialNumberParam,
          courseCode: courseCodeParam,
          courseTitle: courseTitleParam,
          type: typeParam,
          registrationNumber: registrationNumberParam,
          slot: slotParam,
          date: dateParam,
          session: sessionParam,
          reportingTime: reportingTimeParam,
          examTime: examTimeParam,
          venue: venueParam,
          seatLocation: seatLocationParam,
          seatNumber: seatNumberParam,
        )..id = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

        return object;
      },
    ),
    Timetable: obx_int.EntityDefinition<Timetable>(
      model: _entities[9],
      toOneRelations: (Timetable object) => [],
      toManyRelations: (Timetable object) => {
        obx_int.RelInfo<Timetable>.toMany(3, object.id!): object.monday,
        obx_int.RelInfo<Timetable>.toMany(4, object.id!): object.tuesday,
        obx_int.RelInfo<Timetable>.toMany(5, object.id!): object.wednesday,
        obx_int.RelInfo<Timetable>.toMany(6, object.id!): object.thursday,
        obx_int.RelInfo<Timetable>.toMany(7, object.id!): object.friday,
        obx_int.RelInfo<Timetable>.toMany(8, object.id!): object.saturday,
        obx_int.RelInfo<Timetable>.toMany(9, object.id!): object.sunday,
      },
      getId: (Timetable object) => object.id,
      setId: (Timetable object, int id) {
        object.id = id;
      },
      objectToFB: (Timetable object, fb.Builder fbb) {
        fbb.startTable(2);
        fbb.addInt64(0, object.id ?? 0);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final mondayParam = obx.ToMany<Day>();
        final tuesdayParam = obx.ToMany<Day>();
        final wednesdayParam = obx.ToMany<Day>();
        final thursdayParam = obx.ToMany<Day>();
        final fridayParam = obx.ToMany<Day>();
        final saturdayParam = obx.ToMany<Day>();
        final sundayParam = obx.ToMany<Day>();
        final object = Timetable(
          monday: mondayParam,
          tuesday: tuesdayParam,
          wednesday: wednesdayParam,
          thursday: thursdayParam,
          friday: fridayParam,
          saturday: saturdayParam,
          sunday: sundayParam,
        )..id = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
        obx_int.InternalToManyAccess.setRelInfo<Timetable>(
          object.monday,
          store,
          obx_int.RelInfo<Timetable>.toMany(3, object.id!),
        );
        obx_int.InternalToManyAccess.setRelInfo<Timetable>(
          object.tuesday,
          store,
          obx_int.RelInfo<Timetable>.toMany(4, object.id!),
        );
        obx_int.InternalToManyAccess.setRelInfo<Timetable>(
          object.wednesday,
          store,
          obx_int.RelInfo<Timetable>.toMany(5, object.id!),
        );
        obx_int.InternalToManyAccess.setRelInfo<Timetable>(
          object.thursday,
          store,
          obx_int.RelInfo<Timetable>.toMany(6, object.id!),
        );
        obx_int.InternalToManyAccess.setRelInfo<Timetable>(
          object.friday,
          store,
          obx_int.RelInfo<Timetable>.toMany(7, object.id!),
        );
        obx_int.InternalToManyAccess.setRelInfo<Timetable>(
          object.saturday,
          store,
          obx_int.RelInfo<Timetable>.toMany(8, object.id!),
        );
        obx_int.InternalToManyAccess.setRelInfo<Timetable>(
          object.sunday,
          store,
          obx_int.RelInfo<Timetable>.toMany(9, object.id!),
        );
        return object;
      },
    ),
    User: obx_int.EntityDefinition<User>(
      model: _entities[10],
      toOneRelations: (User object) => [
        object.profile,
        object.timetable,
        object.gradeHistory,
      ],
      toManyRelations: (User object) => {
        obx_int.RelInfo<User>.toMany(10, object.id!): object.attendance,
        obx_int.RelInfo<User>.toMany(11, object.id!): object.examSchedule,
        obx_int.RelInfo<User>.toMany(12, object.id!): object.marks,
      },
      getId: (User object) => object.id,
      setId: (User object, int id) {
        object.id = id;
      },
      objectToFB: (User object, fb.Builder fbb) {
        fbb.startTable(5);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addInt64(1, object.profile.targetId);
        fbb.addInt64(2, object.timetable.targetId);
        fbb.addInt64(3, object.gradeHistory.targetId);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final profileParam = obx.ToOne<Profile>(
          targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
        );
        final attendanceParam = obx.ToMany<Attendance>();
        final timetableParam = obx.ToOne<Timetable>(
          targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
        );
        final examScheduleParam = obx.ToMany<ExamSchedule>();
        final gradeHistoryParam = obx.ToOne<GradeHistory>(
          targetId: const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
        );
        final marksParam = obx.ToMany<Mark>();
        final object = User(
          profile: profileParam,
          attendance: attendanceParam,
          timetable: timetableParam,
          examSchedule: examScheduleParam,
          gradeHistory: gradeHistoryParam,
          marks: marksParam,
        )..id = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);
        object.profile.attach(store);
        object.timetable.attach(store);
        object.gradeHistory.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<User>(
          object.attendance,
          store,
          obx_int.RelInfo<User>.toMany(10, object.id!),
        );
        obx_int.InternalToManyAccess.setRelInfo<User>(
          object.examSchedule,
          store,
          obx_int.RelInfo<User>.toMany(11, object.id!),
        );
        obx_int.InternalToManyAccess.setRelInfo<User>(
          object.marks,
          store,
          obx_int.RelInfo<User>.toMany(12, object.id!),
        );
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Attendance] entity fields to define ObjectBox queries.
class Attendance_ {
  /// See [Attendance.id].
  static final id = obx.QueryIntegerProperty<Attendance>(
    _entities[0].properties[0],
  );

  /// See [Attendance.courseId].
  static final courseId = obx.QueryStringProperty<Attendance>(
    _entities[0].properties[1],
  );

  /// See [Attendance.courseCode].
  static final courseCode = obx.QueryStringProperty<Attendance>(
    _entities[0].properties[2],
  );

  /// See [Attendance.courseName].
  static final courseName = obx.QueryStringProperty<Attendance>(
    _entities[0].properties[3],
  );

  /// See [Attendance.courseType].
  static final courseType = obx.QueryStringProperty<Attendance>(
    _entities[0].properties[4],
  );

  /// See [Attendance.courseSlot].
  static final courseSlot = obx.QueryStringProperty<Attendance>(
    _entities[0].properties[5],
  );

  /// See [Attendance.attendedClasses].
  static final attendedClasses = obx.QueryStringProperty<Attendance>(
    _entities[0].properties[6],
  );

  /// See [Attendance.totalClasses].
  static final totalClasses = obx.QueryStringProperty<Attendance>(
    _entities[0].properties[7],
  );

  /// See [Attendance.attendancePercentage].
  static final attendancePercentage = obx.QueryStringProperty<Attendance>(
    _entities[0].properties[8],
  );

  /// See [Attendance.withinAttendancePercentage].
  static final withinAttendancePercentage = obx.QueryStringProperty<Attendance>(
    _entities[0].properties[9],
  );

  /// See [Attendance.debarStatus].
  static final debarStatus = obx.QueryStringProperty<Attendance>(
    _entities[0].properties[10],
  );
}

/// [Day] entity fields to define ObjectBox queries.
class Day_ {
  /// See [Day.id].
  static final id = obx.QueryIntegerProperty<Day>(_entities[1].properties[0]);

  /// See [Day.courseName].
  static final courseName = obx.QueryStringProperty<Day>(
    _entities[1].properties[1],
  );

  /// See [Day.slot].
  static final slot = obx.QueryStringProperty<Day>(_entities[1].properties[2]);

  /// See [Day.venue].
  static final venue = obx.QueryStringProperty<Day>(_entities[1].properties[3]);

  /// See [Day.faculty].
  static final faculty = obx.QueryStringProperty<Day>(
    _entities[1].properties[4],
  );

  /// See [Day.courseCode].
  static final courseCode = obx.QueryStringProperty<Day>(
    _entities[1].properties[5],
  );

  /// See [Day.courseType].
  static final courseType = obx.QueryStringProperty<Day>(
    _entities[1].properties[6],
  );

  /// See [Day.courseTime].
  static final courseTime = obx.QueryStringProperty<Day>(
    _entities[1].properties[7],
  );
}

/// [Detail] entity fields to define ObjectBox queries.
class Detail_ {
  /// See [Detail.id].
  static final id = obx.QueryIntegerProperty<Detail>(
    _entities[2].properties[0],
  );

  /// See [Detail.serialNumber].
  static final serialNumber = obx.QueryStringProperty<Detail>(
    _entities[2].properties[1],
  );

  /// See [Detail.markTitle].
  static final markTitle = obx.QueryStringProperty<Detail>(
    _entities[2].properties[2],
  );

  /// See [Detail.maxMark].
  static final maxMark = obx.QueryStringProperty<Detail>(
    _entities[2].properties[3],
  );

  /// See [Detail.weightage].
  static final weightage = obx.QueryStringProperty<Detail>(
    _entities[2].properties[4],
  );

  /// See [Detail.status].
  static final status = obx.QueryStringProperty<Detail>(
    _entities[2].properties[5],
  );

  /// See [Detail.scoredMark].
  static final scoredMark = obx.QueryStringProperty<Detail>(
    _entities[2].properties[6],
  );

  /// See [Detail.weightageMark].
  static final weightageMark = obx.QueryStringProperty<Detail>(
    _entities[2].properties[7],
  );

  /// See [Detail.remark].
  static final remark = obx.QueryStringProperty<Detail>(
    _entities[2].properties[8],
  );
}

/// [ExamSchedule] entity fields to define ObjectBox queries.
class ExamSchedule_ {
  /// See [ExamSchedule.id].
  static final id = obx.QueryIntegerProperty<ExamSchedule>(
    _entities[3].properties[0],
  );

  /// See [ExamSchedule.examType].
  static final examType = obx.QueryStringProperty<ExamSchedule>(
    _entities[3].properties[1],
  );

  /// see [ExamSchedule.subjects]
  static final subjects = obx.QueryRelationToMany<ExamSchedule, Subject>(
    _entities[3].relations[0],
  );
}

/// [GradeHistory] entity fields to define ObjectBox queries.
class GradeHistory_ {
  /// See [GradeHistory.id].
  static final id = obx.QueryIntegerProperty<GradeHistory>(
    _entities[4].properties[0],
  );

  /// See [GradeHistory.creditsRegistered].
  static final creditsRegistered = obx.QueryStringProperty<GradeHistory>(
    _entities[4].properties[1],
  );

  /// See [GradeHistory.creditsEarned].
  static final creditsEarned = obx.QueryStringProperty<GradeHistory>(
    _entities[4].properties[2],
  );

  /// See [GradeHistory.cgpa].
  static final cgpa = obx.QueryStringProperty<GradeHistory>(
    _entities[4].properties[3],
  );
}

/// [Mark] entity fields to define ObjectBox queries.
class Mark_ {
  /// See [Mark.id].
  static final id = obx.QueryIntegerProperty<Mark>(_entities[5].properties[0]);

  /// See [Mark.serialNumber].
  static final serialNumber = obx.QueryStringProperty<Mark>(
    _entities[5].properties[1],
  );

  /// See [Mark.classId].
  static final classId = obx.QueryStringProperty<Mark>(
    _entities[5].properties[2],
  );

  /// See [Mark.courseCode].
  static final courseCode = obx.QueryStringProperty<Mark>(
    _entities[5].properties[3],
  );

  /// See [Mark.courseTitle].
  static final courseTitle = obx.QueryStringProperty<Mark>(
    _entities[5].properties[4],
  );

  /// See [Mark.courseType].
  static final courseType = obx.QueryStringProperty<Mark>(
    _entities[5].properties[5],
  );

  /// See [Mark.courseSystem].
  static final courseSystem = obx.QueryStringProperty<Mark>(
    _entities[5].properties[6],
  );

  /// See [Mark.faculty].
  static final faculty = obx.QueryStringProperty<Mark>(
    _entities[5].properties[7],
  );

  /// See [Mark.slot].
  static final slot = obx.QueryStringProperty<Mark>(_entities[5].properties[8]);

  /// see [Mark.details]
  static final details = obx.QueryRelationToMany<Mark, Detail>(
    _entities[5].relations[0],
  );
}

/// [MentorDetails] entity fields to define ObjectBox queries.
class MentorDetails_ {
  /// See [MentorDetails.id].
  static final id = obx.QueryIntegerProperty<MentorDetails>(
    _entities[6].properties[0],
  );

  /// See [MentorDetails.facultyId].
  static final facultyId = obx.QueryStringProperty<MentorDetails>(
    _entities[6].properties[1],
  );

  /// See [MentorDetails.facultyName].
  static final facultyName = obx.QueryStringProperty<MentorDetails>(
    _entities[6].properties[2],
  );

  /// See [MentorDetails.facultyDesignation].
  static final facultyDesignation = obx.QueryStringProperty<MentorDetails>(
    _entities[6].properties[3],
  );

  /// See [MentorDetails.school].
  static final school = obx.QueryStringProperty<MentorDetails>(
    _entities[6].properties[4],
  );

  /// See [MentorDetails.cabin].
  static final cabin = obx.QueryStringProperty<MentorDetails>(
    _entities[6].properties[5],
  );

  /// See [MentorDetails.facultyDepartment].
  static final facultyDepartment = obx.QueryStringProperty<MentorDetails>(
    _entities[6].properties[6],
  );

  /// See [MentorDetails.facultyEmail].
  static final facultyEmail = obx.QueryStringProperty<MentorDetails>(
    _entities[6].properties[7],
  );

  /// See [MentorDetails.facultyIntercom].
  static final facultyIntercom = obx.QueryStringProperty<MentorDetails>(
    _entities[6].properties[8],
  );

  /// See [MentorDetails.facultyMobileNumber].
  static final facultyMobileNumber = obx.QueryStringProperty<MentorDetails>(
    _entities[6].properties[9],
  );
}

/// [Profile] entity fields to define ObjectBox queries.
class Profile_ {
  /// See [Profile.id].
  static final id = obx.QueryIntegerProperty<Profile>(
    _entities[7].properties[0],
  );

  /// See [Profile.applicationNumber].
  static final applicationNumber = obx.QueryStringProperty<Profile>(
    _entities[7].properties[1],
  );

  /// See [Profile.studentName].
  static final studentName = obx.QueryStringProperty<Profile>(
    _entities[7].properties[2],
  );

  /// See [Profile.dob].
  static final dob = obx.QueryStringProperty<Profile>(
    _entities[7].properties[3],
  );

  /// See [Profile.gender].
  static final gender = obx.QueryStringProperty<Profile>(
    _entities[7].properties[4],
  );

  /// See [Profile.bloodGroup].
  static final bloodGroup = obx.QueryStringProperty<Profile>(
    _entities[7].properties[5],
  );

  /// See [Profile.email].
  static final email = obx.QueryStringProperty<Profile>(
    _entities[7].properties[6],
  );

  /// See [Profile.base64Pfp].
  static final base64Pfp = obx.QueryStringProperty<Profile>(
    _entities[7].properties[7],
  );

  /// See [Profile.gradeHistory].
  static final gradeHistory = obx.QueryRelationToOne<Profile, GradeHistory>(
    _entities[7].properties[8],
  );

  /// See [Profile.mentorDetails].
  static final mentorDetails = obx.QueryRelationToOne<Profile, MentorDetails>(
    _entities[7].properties[9],
  );
}

/// [Subject] entity fields to define ObjectBox queries.
class Subject_ {
  /// See [Subject.id].
  static final id = obx.QueryIntegerProperty<Subject>(
    _entities[8].properties[0],
  );

  /// See [Subject.serialNumber].
  static final serialNumber = obx.QueryStringProperty<Subject>(
    _entities[8].properties[1],
  );

  /// See [Subject.courseCode].
  static final courseCode = obx.QueryStringProperty<Subject>(
    _entities[8].properties[2],
  );

  /// See [Subject.courseTitle].
  static final courseTitle = obx.QueryStringProperty<Subject>(
    _entities[8].properties[3],
  );

  /// See [Subject.type].
  static final type = obx.QueryStringProperty<Subject>(
    _entities[8].properties[4],
  );

  /// See [Subject.registrationNumber].
  static final registrationNumber = obx.QueryStringProperty<Subject>(
    _entities[8].properties[5],
  );

  /// See [Subject.slot].
  static final slot = obx.QueryStringProperty<Subject>(
    _entities[8].properties[6],
  );

  /// See [Subject.date].
  static final date = obx.QueryStringProperty<Subject>(
    _entities[8].properties[7],
  );

  /// See [Subject.session].
  static final session = obx.QueryStringProperty<Subject>(
    _entities[8].properties[8],
  );

  /// See [Subject.reportingTime].
  static final reportingTime = obx.QueryStringProperty<Subject>(
    _entities[8].properties[9],
  );

  /// See [Subject.examTime].
  static final examTime = obx.QueryStringProperty<Subject>(
    _entities[8].properties[10],
  );

  /// See [Subject.venue].
  static final venue = obx.QueryStringProperty<Subject>(
    _entities[8].properties[11],
  );

  /// See [Subject.seatLocation].
  static final seatLocation = obx.QueryStringProperty<Subject>(
    _entities[8].properties[12],
  );

  /// See [Subject.seatNumber].
  static final seatNumber = obx.QueryStringProperty<Subject>(
    _entities[8].properties[13],
  );
}

/// [Timetable] entity fields to define ObjectBox queries.
class Timetable_ {
  /// See [Timetable.id].
  static final id = obx.QueryIntegerProperty<Timetable>(
    _entities[9].properties[0],
  );

  /// see [Timetable.monday]
  static final monday = obx.QueryRelationToMany<Timetable, Day>(
    _entities[9].relations[0],
  );

  /// see [Timetable.tuesday]
  static final tuesday = obx.QueryRelationToMany<Timetable, Day>(
    _entities[9].relations[1],
  );

  /// see [Timetable.wednesday]
  static final wednesday = obx.QueryRelationToMany<Timetable, Day>(
    _entities[9].relations[2],
  );

  /// see [Timetable.thursday]
  static final thursday = obx.QueryRelationToMany<Timetable, Day>(
    _entities[9].relations[3],
  );

  /// see [Timetable.friday]
  static final friday = obx.QueryRelationToMany<Timetable, Day>(
    _entities[9].relations[4],
  );

  /// see [Timetable.saturday]
  static final saturday = obx.QueryRelationToMany<Timetable, Day>(
    _entities[9].relations[5],
  );

  /// see [Timetable.sunday]
  static final sunday = obx.QueryRelationToMany<Timetable, Day>(
    _entities[9].relations[6],
  );
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// See [User.id].
  static final id = obx.QueryIntegerProperty<User>(_entities[10].properties[0]);

  /// See [User.profile].
  static final profile = obx.QueryRelationToOne<User, Profile>(
    _entities[10].properties[1],
  );

  /// See [User.timetable].
  static final timetable = obx.QueryRelationToOne<User, Timetable>(
    _entities[10].properties[2],
  );

  /// See [User.gradeHistory].
  static final gradeHistory = obx.QueryRelationToOne<User, GradeHistory>(
    _entities[10].properties[3],
  );

  /// see [User.attendance]
  static final attendance = obx.QueryRelationToMany<User, Attendance>(
    _entities[10].relations[0],
  );

  /// see [User.examSchedule]
  static final examSchedule = obx.QueryRelationToMany<User, ExamSchedule>(
    _entities[10].relations[1],
  );

  /// see [User.marks]
  static final marks = obx.QueryRelationToMany<User, Mark>(
    _entities[10].relations[2],
  );
}
